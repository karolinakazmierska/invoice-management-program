{"version":3,"sources":["reducers/index.js","reducers/data.js","actions/types.js","firebase.js","actions/index.js","components/InvoicesList.js","components/NewInvoiceForm.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","data","state","action","type","Object","assign","invoices","payload","products","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","databaseRef","ref","invoicesRef","child","productsRef","saveInvoice","newInvoice","dispatch","a","push","set","deleteInvoice","invoice","orderByChild","equalTo","id","once","snapshot","forEach","remove","fetchInvoices","on","val","fetchProducts","InvoicesList","handleDelete","obj","props","this","arrData","key","Typography","color","map","i","ListItem","divider","button","ContainerComponent","variant","product","ListItemSecondaryAction","IconButton","onClick","undefined","CircularProgress","renderInvoices","Component","connect","actions","NewInvoiceForm","invoiceNumber","invoiceProduct","invoiceIds","handleChange","e","setState","target","name","value","saveNewInvoice","event","preventDefault","isDuplicate","includes","alert","hideNewInvoiceForm","renderProductOptions","Array","from","elem","MenuItem","Container","maxWidth","style","paddingBottom","paddingTop","onSubmit","Grid","container","direction","item","xs","sm","FormLabel","TextField","minWidth","placeholder","onChange","Select","justify","Button","Home","showNewInvoiceForm","renderNewInvoiceForm","renderInvoiceList","padding","align","textAlign","className","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.95e6aff6.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport data from './data';\nexport default combineReducers({\n    data\n});\n","import { FETCH_INVOICES, FETCH_PRODUCTS, SAVE_INVOICE, DELETE_INVOICE } from '../actions/types';\n\nexport default (state = {}, action) => {\n    switch(action.type) {\n        case FETCH_INVOICES:\n            return Object.assign({}, state, {\n                invoices: action.payload\n            })\n        case FETCH_PRODUCTS:\n            return Object.assign({}, state, {\n                products: action.payload\n            })\n        case SAVE_INVOICE:\n            return Object.assign({}, state, {\n                invoices: action.payload\n            })\n        case DELETE_INVOICE:\n            return Object.assign({}, state, {\n                invoices: action.payload\n            })\n        default:\n            return state;\n    }\n};\n","const FETCH_INVOICES = 'FETCH_INVOICES';\nconst FETCH_PRODUCTS = 'FETCH_PRODUCTS';\nconst SAVE_INVOICE = 'SAVE_INVOICE';\nconst DELETE_INVOICE = 'DELETE_INVOICE';\n\nexport {\n    FETCH_INVOICES,\n    FETCH_PRODUCTS,\n    SAVE_INVOICE,\n    DELETE_INVOICE\n};\n","import * as firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyASOdTO6t_AKbbKvcCl2tUHiNYu5wW446I\",\n    authDomain: \"invoice-program.firebaseapp.com\",\n    databaseURL: \"https://invoice-program.firebaseio.com\",\n    projectId: \"invoice-program\",\n    storageBucket: \"invoice-program.appspot.com\",\n    messagingSenderId: \"738097600326\"\n}\nfirebase.initializeApp(config);\nconst databaseRef = firebase.database().ref();\nexport const invoicesRef = databaseRef.child(\"invoices\");\nexport const productsRef = databaseRef.child(\"products\");\n","import { invoicesRef } from '../firebase';\nimport { productsRef } from '../firebase';\nconst FETCH_INVOICES = 'FETCH_INVOICES';\nconst FETCH_PRODUCTS = 'FETCH_PRODUCTS';\n\nexport const saveInvoice = (newInvoice) => async dispatch => {\n    invoicesRef.push().set(newInvoice);\n};\nexport const deleteInvoice = (invoice) => async dispatch => {\n    let query = invoicesRef.orderByChild(\"id\").equalTo(invoice.id);\n    query.once('value', function(snapshot) {\n        snapshot.forEach(function(child) {\n            child.ref.remove();\n        })\n    })\n};\nexport const fetchInvoices = () => async dispatch => {\n    invoicesRef.on(\"value\", snapshot => {\n        dispatch({\n            type: FETCH_INVOICES,\n            payload: snapshot.val()\n        });\n    });\n};\nexport const fetchProducts = () => async dispatch => {\n    productsRef.on(\"value\", snapshot => {\n        dispatch({\n            type: FETCH_PRODUCTS,\n            payload: snapshot.val()\n        });\n    });\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { CircularProgress, Typography, ListItem, ListItemSecondaryAction,  IconButton } from '@material-ui/core';\nimport Delete from '@material-ui/icons/Delete'\n\nclass InvoicesList extends Component {\n    UNSAFE_componentWillMount() {\n        this.props.fetchInvoices();\n    }\n    handleDelete = (obj) => {\n        this.props.deleteInvoice(obj);\n    }\n    renderInvoices() {\n        const {data} = this.props;\n        let arrData = [];\n        for (const key in data.invoices) {\n            arrData.push(data.invoices[key]);\n        }\n        if (data && data.invoices == null) {\n            return <Typography color=\"secondary\">You don't have any invoices yet.</Typography>\n        }\n        return arrData.map((obj, i) => {\n            return (\n                <ListItem divider={true} key={i} button ContainerComponent=\"div\">\n                    <div>\n                        <Typography color=\"textPrimary\">Invoice number: {obj.id}</Typography>\n                        <Typography color=\"textSecondary\" variant=\"body2\">{obj.product}</Typography>\n                    </div>\n                    <ListItemSecondaryAction >\n                        <IconButton color='primary' onClick={() => this.handleDelete(obj)} ><Delete/></IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        });\n    }\n    render() {\n        const {data} = this.props;\n        return (<div>\n                <Typography >Your invoices</Typography>\n                {data.invoices === undefined ? <CircularProgress /> : this.renderInvoices()}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({data}) => {\n    return {\n        data\n    }\n}\nexport default connect(mapStateToProps, actions)(InvoicesList);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from '../actions';\nimport {CircularProgress, Container, Button, Typography, TextField, Select, MenuItem, Grid, FormLabel} from '@material-ui/core';\n\nclass NewInvoiceForm extends Component {\n    state = {\n        invoiceNumber: '',\n        invoiceProduct: '',\n        invoiceIds: []\n    }\n    UNSAFE_componentWillMount() {\n        this.props.fetchProducts();\n        const {data} = this.props;\n        let arrData = [];\n        for (const key in data.invoices) {\n            arrData.push(data.invoices[key].id);\n        }\n        this.setState({\n            invoiceIds: arrData\n        })\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n    saveNewInvoice = (event) => {\n        event.preventDefault();\n        const newInvoice = {\n            id: this.state.invoiceNumber,\n            product: this.state.invoiceProduct || ''\n        }\n        const isDuplicate = this.state.invoiceIds.includes(newInvoice.id)\n\n        if (!newInvoice.id) {\n            alert('Invoice number cannot be empty');\n        } else if (!newInvoice.product) {\n            alert('Product field cannot be empty');\n        } else if (isDuplicate) {\n            alert('An invoice with this number already exists');\n        } else {\n            this.props.saveInvoice(newInvoice);\n            this.props.hideNewInvoiceForm();\n        }\n    }\n    renderProductOptions = () => {\n        const {data} = this.props;\n        const arrData = Array.from(data.products);\n        return arrData.map((elem, i) => {\n            return <MenuItem value={elem} key={i}>{elem}</MenuItem>\n        })\n    }\n    render() {\n        const {data} = this.props;\n        return (\n            <Container maxWidth=\"sm\">\n                <div style={{ paddingBottom: 20, paddingTop: 20 }}>\n                    <Typography variant=\"h6\">Add a new invoice</Typography>\n                </div>\n\n                {!data.products ?\n                 <CircularProgress />\n                :\n                <form onSubmit={this.saveNewInvoice}>\n                    <Grid container direction=\"column\">\n                        <Grid>\n                            <div style={{ paddingBottom: 20 }}>\n                                <Grid item xs={12} sm={6}>\n                                    <FormLabel>Invoice number</FormLabel>\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField style={{minWidth: '100%'}} id=\"outlined-basic\" variant=\"outlined\" type=\"text\" name=\"invoiceNumber\" placeholder=\"e.g. 1/2020\" onChange={e => this.handleChange(e)} />\n                                </Grid>\n                            </div>\n                            <div style={{ paddingBottom: 20 }}>\n                                <Grid item xs={12} sm={6}>\n                                    <FormLabel>Product:</FormLabel>\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <Select style={{minWidth: '100%'}} variant=\"outlined\" name=\"invoiceProduct\" value={this.state.invoiceProduct} onChange={e => this.handleChange(e)}>\n                                        {this.renderProductOptions()}\n                                    </Select>\n                                </Grid>\n                            </div>\n                        </Grid>\n                        <Grid container justify=\"space-between\">\n                            <Button variant=\"contained\" color=\"secondary\" onClick={this.props.hideNewInvoiceForm}>Cancel</Button>\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\" value=\"Submit\">Submit</Button>\n                        </Grid>\n                    </Grid>\n                </form>\n                }\n\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = ({data}) => {\n    return {\n        data\n    }\n}\nexport default connect(mapStateToProps, actions)(NewInvoiceForm);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from '../actions';\nimport InvoicesList from './InvoicesList';\nimport NewInvoiceForm from './NewInvoiceForm';\nimport { Container, Button, Typography } from '@material-ui/core';\n\nclass Home extends Component {\n    state = {\n        showNewInvoiceForm: false,\n    };\n    renderNewInvoiceForm = () => {\n        if (this.state.showNewInvoiceForm) {\n            return <NewInvoiceForm hideNewInvoiceForm={this.hideNewInvoiceForm} />\n        }\n    }\n    renderInvoiceList = () => {\n        if (!this.state.showNewInvoiceForm) {\n            return (\n                <Container maxWidth=\"sm\">\n                    <div style={{ padding: 20 }}>\n                        <Typography variant=\"h5\" align=\"center\">Invoice Management System</Typography>\n                    </div>\n                    <div style={{ paddingBottom: 20, textAlign: 'center'  }}>\n                        <Button variant=\"contained\" color=\"primary\" align=\"center\" onClick={() => this.showNewInvoiceForm()}>Create a new invoice</Button>\n                    </div>\n                    <InvoicesList />\n                </Container>\n            )\n        }\n    }\n    showNewInvoiceForm = () => {\n        this.setState({showNewInvoiceForm: true})\n    }\n    hideNewInvoiceForm = () => {\n        this.setState({showNewInvoiceForm: false})\n    }\n    render() {\n        return (\n            <div className=\"homeContainer\">\n                <div>\n                    {this.renderInvoiceList()}\n                </div>\n                <div>\n                    {this.renderNewInvoiceForm()}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({data}) => {\n    return {\n        data\n    }\n}\nexport default connect(mapStateToProps, actions)(Home);\n","import React, {Component} from 'react';\nimport Home from './components/Home';\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Home/>\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n        </Provider>,\n        document.getElementById(\"root\")\n);\nserviceWorker.register();\n"],"sourceRoot":""}